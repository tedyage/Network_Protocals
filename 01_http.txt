Http(Hyper Text Transfer Protocal) 超文本传输协议

Http是工作在网络应用层，基于TCP/IP协议的，面向对象的，用于访问网络资源的协议。
Http的工作原理是，客户端向服务端发送请求，服务端接收请求，处理请求，并返回响应信息。
Http请求的特点是：
1.简单方便，只需要确定请求方法和URL，即可发起请求。
2.灵活，Http可以请求任意类型的网络资源（数据，文本，音频，视频以及其他格式的文件），可以通过Content-Type控制。
3.无连接，一次网络连接只可以处理一个Http请求，请求完成之后，则断开网络连接。
4.无状态，服务端在处理请求事务是，不会记录处理请求内部的内容。

发起Http请求需要确定两点：请求方法和URL
1.请求方法：Http请求目前有8种方法，分别是：
GET：请求服务器的指定资源，通常用于获取某个资源的信息；
POST：向服务器的指定资源提交新的数据，通常用于创建新的资源和更新指定资源的数据；
PUT：向服务器的指定资源传送更新的数据，通常用于将新的资源数据取代元资源数据；
DELETE：删除指定的资源；
OPTION：通常用于返回服务器性能。
CONNECT:略
TRACE:略

2.URL(Uniform Resource Locator) 统一资源定位符
URL由3部分组成：协议（http/https）/主机IP（有时也包括端口号，没有端口号则默认80）/虚拟路径（文件夹和文件名，若没有则读取默认文件）

Http报文分为请求报文和相应报文
1.请求报文分为四部分（请求行，请求头部，空行，请求正文）
1）请求行内部包含：请求方法，URL，Http版本（默认http1.1）
2）请求头部包含有服务器处理请求是需要的信息，大致包含：
    浏览器信息：Accept，浏览器希望接受的数据类别。
          Accept-Encoding，浏览器解压数据时的编码方式。
          Accept-Language，浏览器希望的语言种类。
          Accept-Charset，浏览器可以接受的字符集。
          User-Agent，唯一标识浏览器的种类信息。
    Cookies：浏览器缓存信息。
    请求相关信息：Host，服务器主机名。
             Connect，连接状态，如果是Close，则代表完成该请求后，自动断开连接；
                    如果是Keep-Alive，则代表不自动断开连接，留到下一个请求继续使用，目前Http1.1默认使用长连接Keep-Alive.
             Referer，发起本请求时，所在的页面地址。
             Content-Length，请求正文的长度。
             Content-Type，请求正文的类别。
3）空行，代表请求头部信息的结束。
4）请求正文，本次请求的参数。

2.响应报文分为四部分（状态行，响应头部，空行，响应正文）
1）状态行内部包含：Http版本（默认http1.1）和状态码
2）响应头部内部包含浏览器接收响应需要的信息，大致包含：
    服务器信息：Server，服务器名称；
               Allow，资源允许请求的方式。
    Cookies：缓存到浏览器的信息。
    相应的相关信息：Connect，连接状态，与请求头部的Connect相同；
                  Content-Length，相应正文长度；
                  Content-Type：相应正文类别；
                  Location：重定向的地址。
3）空行，代表相应头部信息的结束。
4）相应正文，返回的具体结果。

响应状态码大致分为4类：
1**：信息，指服务器已接收到了请求，客户端可以继续执行操作。
2**：成功，指服务器已经接受请求并完成处理。
3**：重定向，指服务器需要做进一步处理。
4**：客户端请求出错，服务端接收不到请求。
5**：服务端处理请求时，出现内部错误。

GET和POST请求的区别；
1.GET请求会将参数附在url上，通常以?开头，不同参数之间用&连接，这样，就可以在url上看到参数了；
  POST请求会将参数存在请求正文中，这样，url是看不到任何变化的。
2.GET请求传输数据的长度是小于POST请求的。
  各个浏览器可能会对url的长度做限制，所以GET请求的参数长度有限。
  POST请求由于是将参数存在于请求正文中，所以理论上是不限参数大小的，但是服务器可能会限制POST提交数据的大小。
  总之，POST适用于传输参数长度较大的请求，GET只适用于参数长度小的请求。
3.GET的安全性低于POST请求，
  由于GET请求的参数暴露于url中，容易被截取，相比POST将参数存在请求正文中的表现，GET请求的安全性较低。

Http1.1与Http1.0比较
1.缓存处理：Http1.0中主要使用header里的If-Modified-Since，Expires来作为缓存判断的标准，
           Http1.1则引入了更多的缓存控制策略。
2.带宽优化以网络连接的使用：Http1.0中，有时，客户端只是需要请求资源的一部分，但是服务器却将整个资源对象传送过来了，
                        这存在着一些浪费带宽的现象。
                          Http1.1中，请求头引入了range头域，它允许值请求资源的某部分，这样就充分利用了带宽。
3.错误通知的管理：Http1.1比Http1.0新增了更多的错误状态码。
4.Host头处理：Http1.1的请求头和响应头都引入Host头域，用以区分共享IP的多个主机。
5.长连接：Http1.1支持长连接，和流水线处理，一个TCP连接可以传送多个Http请求和相应，减少了建立连接和关闭连接的消耗和延迟。

Https与Http的区别：
1.Https需要到CA去申请证书。
2.Http协议运行在TCP之上，所有传输的内容都是明文；Https运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密处理。
3.Http与Https默认使用的连接端口不一样，Http默认使用80，Https默认使用443

Http2.0与Http1.1比较
1.采用多路复用的连接方式，使得多个请求共享一个TCP连接，降低了延迟。
2.header压缩：http1.1的header比较大，而且每次发送http请求都要重复发送请求header，
             http2.0压缩了header，并且客户端和服务器端会个自缓存一份header fields表，避免了header传输。
3.采用二进制解析http请求：http1.1是采用文本的格式解析http请求，http2.0采用二进制解析http请求，比较高效。
4.服务端推送：http2.0拥有将某些资源推送到客户端缓存的功能。使得客户端不用再发送请求了。
